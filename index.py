import random
import telebot
from telebot import types
import psycopg2
import os
from google.oauth2 import service_account
from googleapiclient.discovery import build
import re
from dotenv import load_dotenv
from datetime import datetime

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

# Telegram Bot Token –∏–∑ .env
telegram_key = os.getenv("telegram_key")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL
DB_HOST = os.getenv("DB_HOST", "localhost")
DB_NAME = os.getenv("DB_NAME", "restaurant")
DB_USER = os.getenv("DB_USER", "postgres")
DB_PASSWORD = os.getenv("DB_PASSWORD", "ZX060688")

conn = psycopg2.connect(
    dbname=DB_NAME, user=DB_USER, password=DB_PASSWORD, host=DB_HOST
)
cursor = conn.cursor()

print(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ") # –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
cursor.execute('''
    CREATE TABLE IF NOT EXISTS reservations (
        id SERIAL PRIMARY KEY,
        user_id BIGINT,
        date DATE,
        time TIME,
        guests INTEGER,
        name TEXT,
        surname TEXT,
        phone INTEGER
    )
''')
conn.commit()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(telegram_key)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Ä–≤–∏—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
SERVICE_ACCOUNT_FILE = "E:/nodejs_project/RestorauntChat_Bot/credentials.json"  # –£–∫–∞–∂–∏ –ø—É—Ç—å –∫ —Å–≤–æ–µ–º—É JSON-—Ñ–∞–π–ª—É
SCOPES = ["https://www.googleapis.com/auth/calendar"]

credentials = service_account.Credentials.from_service_account_file(
    SERVICE_ACCOUNT_FILE, scopes=SCOPES
)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º Google Calendar API
service = build("calendar", "v3", credentials=credentials)

# ID –∫–∞–ª–µ–Ω–¥–∞—Ä—è, –∫—É–¥–∞ –±—É–¥–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–∏–∑ Google Calendar)
CALENDAR_ID = "25638c3e183fb6eb5d35b39fdbe87d60fb6566092590f6c4a9e7737566eb3fd1@group.calendar.google.com"

def add_booking_to_calendar(user_data):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Google –ö–∞–ª–µ–Ω–¥–∞—Ä—å."""
    event = {
        "summary": f"–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–∏–∫–∞ –¥–ª—è {user_data['guests']} —á–µ–ª.",
        "description": f"–ò–º—è: {user_data['name']} {user_data['surname']}, –¢–µ–ª: {user_data['phone']}",
        "start": {"dateTime": f"{user_data['date']}T{user_data['time']}:00", "timeZone": "Europe/Moscow"},
        "end": {"dateTime": f"{user_data['date']}T{user_data['time']}:30", "timeZone": "Europe/Moscow"},
    }

    event = service.events().insert(calendarId=CALENDAR_ID, body=event).execute()
    print(f"‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {event.get('htmlLink')}")

def hello(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_first_name = message.from_user.first_name or ""
    user_last_name = message.from_user.last_name or ""
    
    full_name = f"{user_first_name} {user_last_name}".strip()  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã, –µ—Å–ª–∏ –Ω–µ—Ç —Ñ–∞–º–∏–ª–∏–∏

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('–°–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞')
    btn2 = types.KeyboardButton('–†–µ–∑–µ—Ä–≤–∞—Ü–∏—è –°—Ç–æ–ª–∏–∫–∞')
    btn3 = types.KeyboardButton('–ê–∫—Ü–∏–∏ –∏ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è')
    btn4 = types.KeyboardButton('–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –†–µ–∑–µ—Ä–≤–∞—Ü–∏–∏')
    btn5 = types.KeyboardButton('–û—Ç–º–µ–Ω–∞ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è')

    keyboard.add(btn1)  # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –≤ –Ω–æ–≤–æ–º —Ä—è–¥—É
    keyboard.add(btn2)
    keyboard.add(btn3)
    keyboard.add(btn4)
    keyboard.add(btn5)
    
    
    welcome_message = f"{full_name}, —Ä–µ—Å—Ç–æ—Ä–∞–Ω '–ö—Ä–∞—Å–Ω–∞—è –ó–≤–µ–∑–¥–∞' –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –í–∞—Å. –í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    bot.send_message(message.chat.id, welcome_message, reply_markup=keyboard)

@bot.message_handler(commands=['start'])
def handle_start(message):
    hello(message)


@bot.message_handler(func=lambda message: message.text in ['–°–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞',
                                                           '–†–µ–∑–µ—Ä–≤–∞—Ü–∏—è –°—Ç–æ–ª–∏–∫–∞',
                                                           '–ê–∫—Ü–∏–∏ –∏ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è',
                                                           '–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –†–µ–∑–µ—Ä–≤–∞—Ü–∏–∏',
                                                           '–û—Ç–º–µ–Ω–∞ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è'])
def on_click(message):
    if message.text == '–°–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞':
        menu_photos = ["E:/nodejs_project/RestorauntChat_Bot/Menu/main.jpg",
                       "E:/nodejs_project/RestorauntChat_Bot/Menu/salat.jpg",
                       "E:/nodejs_project/RestorauntChat_Bot/Menu/desert.jpg"]  # –ü—É—Ç–∏ –∫ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º –º–µ–Ω—é
        random.shuffle(menu_photos)
        bot.send_photo(message.chat.id, open(menu_photos[0], "rb"))
    
    elif message.text == '–†–µ–∑–µ—Ä–≤–∞—Ü–∏—è –°—Ç–æ–ª–∏–∫–∞':
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–ì–ì–ì–ì-–ú–ú-–î–î):')
        bot.register_next_step_handler(message, get_date)
    
    elif message.text == '–ê–∫—Ü–∏–∏ –∏ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è':
        specials(message)        
    
    elif message.text == '–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –†–µ–∑–µ—Ä–≤–∞—Ü–∏–∏':
        cursor.execute("SELECT date, time, guests, name FROM reservations WHERE user_id=%s", (message.chat.id,))
        reservations = cursor.fetchall()
        if reservations:
            response = "–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n"
            for res in reservations:
                response += f"üìÖ {res[0]}, ‚è∞ {res[1]}, üë• {res[2]} —á–µ–ª., –ò–º—è: {res[3]}\n"
            bot.send_message(message.chat.id, response)
        else:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.")
    elif message.text == '–û—Ç–º–µ–Ω–∞ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è':
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏:')
        bot.register_next_step_handler(message, process_cancellation)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
def get_date(message):
    user_data = {"user_id": message.chat.id, "date": message.text}

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
    try:
        input_date = datetime.strptime(user_data["date"], '%Y-%m-%d').date()
        today = datetime.today().date()

        if input_date < today:
            bot.send_message(message.chat.id, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫ –Ω–∞ –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–Ω–µ —Ä–∞–Ω–µ–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è):")
            bot.register_next_step_handler(message, get_date)
            return

    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
        bot.register_next_step_handler(message, get_date)
        return

    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–ß–ß:–ú–ú):')
    bot.register_next_step_handler(message, get_time, user_data)

def get_time(message, user_data):
    time_pattern = re.compile(r"^([01]\d|2[0-3]):([0-5]\d)$")  # –§–æ—Ä–º–∞—Ç –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 13:20)
    if not time_pattern.match(message.text):
        bot.send_message(message.chat.id, "‚è∞ –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 13:20):")
        bot.register_next_step_handler(message, get_time, user_data)
        return
    
    user_data["time"] = message.text
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π:')
    bot.register_next_step_handler(message, get_guests, user_data)


def get_guests(message, user_data):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä
    if not message.text.isdigit():
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –≥–æ—Å—Ç–µ–π (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")
        bot.register_next_step_handler(message, get_guests, user_data)
        return
    user_data["guests"] = int(message.text)
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:')
    bot.register_next_step_handler(message, get_name, user_data)

def get_name(message, user_data):
    user_data["name"] = message.text
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:')
    bot.register_next_step_handler(message, get_surname, user_data)

def get_surname(message, user_data):
    user_data["surname"] = message.text
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏:')
    bot.register_next_step_handler(message, save_reservation, user_data)

def get_guests(message, user_data):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä
    if not message.text.isdigit():
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –≥–æ—Å—Ç–µ–π (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")
        bot.register_next_step_handler(message, get_guests, user_data)
        return
    user_data["guests"] = int(message.text)
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:')
    bot.register_next_step_handler(message, get_name, user_data)

def save_reservation(message, user_data):
    if not message.text.isdigit():
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω. –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã")
        bot.register_next_step_handler(message, save_reservation, user_data)
        return
    user_data["phone"] = int(message.text)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å—Ç–æ–ª–∏–∫–æ–≤
        if not is_reservation_available(user_data["date"], user_data["time"]):
            bot.send_message(message.chat.id, "–í—Å–µ —Å—Ç–æ–ª–∏–∫–∏ –∑–∞–Ω—è—Ç—ã –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–æ–ª—É—á–∞–µ–º ID –∑–∞–ø–∏—Å–∏
        cursor.execute(
            "INSERT INTO reservations (user_id, date, time, guests, name, surname, phone) "
            "VALUES (%s, %s, %s::TIME, %s, %s, %s, %s) RETURNING id",
            (user_data["user_id"], user_data["date"], user_data["time"], user_data["guests"], 
             user_data["name"], user_data["surname"], user_data["phone"])
        )
        reservation_id = cursor.fetchone()  # –ü–æ–ª—É—á–∞–µ–º ID –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –±—Ä–æ–Ω–∏
        
        if reservation_id:
            conn.commit()

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ Google –ö–∞–ª–µ–Ω–¥–∞—Ä—å
            add_booking_to_calendar(user_data)
            
            bot.send_message(
                message.chat.id,
                f"‚úÖ –í–∞—à —Å—Ç–æ–ª–∏–∫ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω! –°–ø–∞—Å–∏–±–æ! –í–∞—à –Ω–æ–º–µ—Ä —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏: {reservation_id[0]}"
            )
        else:
            bot.send_message(message.chat.id, "‚ö† –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä –±—Ä–æ–Ω–∏.")

    except Exception as e:
        conn.rollback()  # –û–¢–ú–ï–ù–Ø–ï–ú —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")




def is_reservation_available(date, time):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å—Ç–æ–ª–∏–∫–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è."""
    try:
        cursor.execute("""
            SELECT COUNT(*) FROM reservations 
            WHERE date = %s 
            AND time BETWEEN %s AND (%s::TIME + INTERVAL '30 minutes')
        """, (date, time, time))
        
        count = cursor.fetchone()[0]
        return count < 10  # –í —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ 10 —Å—Ç–æ–ª–∏–∫–æ–≤

    except Exception as e:
        conn.rollback()  # –û–¢–ú–ï–ù–Ø–ï–ú —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def process_cancellation(message):
    reservation_id = message.text.strip()
    
    if not reservation_id.isdigit():
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –Ω–æ–º–µ—Ä –±—Ä–æ–Ω–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    reservation_id = int(reservation_id)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏, –≤–∫–ª—é—á–∞—è –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    cursor.execute("SELECT date, time FROM reservations WHERE id = %s AND user_id = %s", 
                   (reservation_id, message.chat.id))
    reservation = cursor.fetchone()

    if not reservation:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    date, time = reservation

    # –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("DELETE FROM reservations WHERE id = %s AND user_id = %s", 
                   (reservation_id, message.chat.id))
    conn.commit()

    # –£–¥–∞–ª—è–µ–º –∏–∑ Google –ö–∞–ª–µ–Ω–¥–∞—Ä—è
    delete_booking_from_calendar(date, time)

    bot.send_message(message.chat.id, f"‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Ññ{reservation_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

def delete_booking_from_calendar(date, time):
    """–£–¥–∞–ª—è–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ Google –ö–∞–ª–µ–Ω–¥–∞—Ä—è."""
    events_result = service.events().list(calendarId=CALENDAR_ID, q=str(date), singleEvents=True).execute()
    events = events_result.get("items", [])

    for event in events:
        event_start = event.get("start", {}).get("dateTime", "")
        if event_start.startswith(f"{date}T{time}"):
            service.events().delete(calendarId=CALENDAR_ID, eventId=event["id"]).execute()
            print(f"‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {event['summary']} —É–¥–∞–ª–µ–Ω–æ –∏–∑ Google –ö–∞–ª–µ–Ω–¥–∞—Ä—è")
            break


def specials(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–¥–µ–ª–∞ –∞–∫—Ü–∏–π –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π."""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('–î–Ω–µ–≤–Ω–æ–π –±–æ–Ω—É—Å')        
    btn2 = types.KeyboardButton('–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å')
    btn3 = types.KeyboardButton('–ü–æ–ª—É—á–∏—Ç—å –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å')
    btn4 = types.KeyboardButton('–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    
    keyboard.add(btn1)  # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –≤ –Ω–æ–≤–æ–º —Ä—è–¥—É
    keyboard.add(btn2)
    keyboard.add(btn3)
    keyboard.add(btn4)
    
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:", reply_markup=keyboard)

@bot.message_handler(func=lambda message: message.text in [
 '–î–Ω–µ–≤–Ω–æ–π –±–æ–Ω—É—Å',
 '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å', 
 '–ü–æ–ª—É—á–∏—Ç—å –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å', 
 '–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])
def day_offer(message):
    if message.text == '–î–Ω–µ–≤–Ω–æ–π –±–æ–Ω—É—Å':
        special_photo = "E:/nodejs_project/RestorauntChat_Bot/Menu/akcii.png"
        try:
            with open(special_photo, "rb") as photo:
                bot.send_photo(message.chat.id, photo)
        except FileNotFoundError:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: —Ñ–∞–π–ª —Å –∞–∫—Ü–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    elif message.text == '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å':
        get_personal_bonus(message)
    elif message.text == '–ü–æ–ª—É—á–∏—Ç—å –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å':
        bot.send_message(message.chat.id, "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫. –°–∫–∏–¥–∫–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥—É—é—â–µ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ 10%")
    elif message.text == '–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        hello(message)        

def get_personal_bonus(message):
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT COUNT(*) FROM reservations WHERE user_id = %s", (message.chat.id,))
    result = cursor.fetchone()
    reservation_count = result[0] if result is not None else 0

    if reservation_count == 0:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π. –ó–∞–±—Ä–æ–Ω–∏—Ä—É–π—Ç–µ —Å—Ç–æ–ª–∏–∫, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å–∫–∏–¥–∫—É!")
    elif reservation_count < 3:
        bot.send_message(message.chat.id, f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —Å–∫–∏–¥–∫—É 10%. –í–∞—à–µ —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {reservation_count}.")
    else:
        bot.send_message(message.chat.id, f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ü–æ—Å–ª–µ —Ç—Ä–µ—Ç—å–µ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞—à–∞ —Å–∫–∏–¥–∫–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 15%. –í–∞—à–µ —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {reservation_count}.")

print(f"–†–∞–±–æ—Ç–∞—é –Ω–∞ –∏–∑–Ω–æ—Å") # –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

bot.polling(none_stop=True)

