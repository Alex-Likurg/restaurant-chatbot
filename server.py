from flask import Flask, request, jsonify, send_from_directory
from flask_cors import CORS
import random
import os
import psycopg2
import telebot
from dotenv import load_dotenv
from datetime import datetime, timedelta
from google.oauth2 import service_account
from googleapiclient.discovery import build
import re  # –î–æ–±–∞–≤–∏–ª–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
telegram_key = os.getenv("telegram_key")
bot = telebot.TeleBot(telegram_key)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
DB_HOST = os.getenv("DB_HOST", "db")
DB_NAME = os.getenv("DB_NAME", "restaurant")
DB_USER = os.getenv("DB_USER", "postgres")
DB_PASSWORD = os.getenv("DB_PASSWORD", "ZX060688")

conn = psycopg2.connect(
    dbname=DB_NAME, user=DB_USER, password=DB_PASSWORD, host=DB_HOST
)
cursor = conn.cursor()

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Ä–≤–∏—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
SERVICE_ACCOUNT_FILE = "credentials.json"  # –£–∫–∞–∂–∏ –ø—É—Ç—å –∫ —Å–≤–æ–µ–º—É JSON-—Ñ–∞–π–ª—É
SCOPES = ["https://www.googleapis.com/auth/calendar"]

credentials = service_account.Credentials.from_service_account_file(
    SERVICE_ACCOUNT_FILE, scopes=SCOPES
)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º Google Calendar API
service = build("calendar", "v3", credentials=credentials)

# ID –∫–∞–ª–µ–Ω–¥–∞—Ä—è, –∫—É–¥–∞ –±—É–¥–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–∏–∑ Google Calendar)
CALENDAR_ID = "25638c3e183fb6eb5d35b39fdbe87d60fb6566092590f6c4a9e7737566eb3fd1@group.calendar.google.com"

# –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞

def sanitize_phone(phone):
    phone = phone.strip()
    if phone.startswith("+"):
        phone = "+" + re.sub(r"\D", "", phone[1:])
    else:
        phone = re.sub(r"\D", "", phone)
    return phone

def is_valid_phone(phone):
    return re.fullmatch(r"\+?\d{5,15}", phone) is not None

def add_booking_to_calendar(user_data):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Google –ö–∞–ª–µ–Ω–¥–∞—Ä—å."""
    event = {
        "summary": f"–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–∏–∫–∞ –¥–ª—è {user_data['guests']} —á–µ–ª.",
        "description": f"–ò–º—è: {user_data['name']} {user_data['surname']}, –¢–µ–ª: {user_data['phone']}",
        "start": {"dateTime": f"{user_data['date']}T{user_data['time']}:00", "timeZone": "Europe/Moscow"},
        "end": {"dateTime": f"{user_data['date']}T{user_data['time']}:30", "timeZone": "Europe/Moscow"},
    }

    event = service.events().insert(calendarId=CALENDAR_ID, body=event).execute()
    print(f"‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {event.get('htmlLink')}")


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask
app = Flask(__name__, static_folder="static")
CORS(app)

def gain_reservations(message):    
    cursor.execute("SELECT date, time, guests, name FROM reservations WHERE user_id=%s", (message.chat.id,))
    reservations = cursor.fetchall()
    if reservations:
        response = "–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n"
        for res in reservations:
            response += f"üìÖ {res[0]}, ‚è∞ {res[1]}, üë• {res[2]} —á–µ–ª., –ò–º—è: {res[3]}\n"
        bot.send_message(message.chat.id, response)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.")



@app.route("/")
def serve_index():
    return send_from_directory("static", "index.html")

@app.route("/reservations")
def serve_reservations():
    """–í—ã–¥–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∞–∫—Ü–∏—è–º–∏"""
    return send_from_directory("static", "reservations.html")

@app.route("/menu")
def serve_menu():
    """–í—ã–¥–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∞–∫—Ü–∏—è–º–∏"""
    return send_from_directory("static", "menu.html")

@app.route("/specials")
def serve_specials():
    """–í—ã–¥–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∞–∫—Ü–∏—è–º–∏"""
    return send_from_directory("static", "specials.html")

@app.route("/delete")
def serve_delete():
    """–í—ã–¥–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    return send_from_directory("static", "delete.html")

@app.route("/", methods=["GET"])
def home():
    return "‚úÖ Telegram Web App API —Ä–∞–±–æ—Ç–∞–µ—Ç!"

@app.route("/api/book_table", methods=["POST"])
def book_table():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–∏–∫–∞ –∏–∑ Web App"""
    data = request.json
    print("üì© –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç Web App:", data)  # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å

    if not data:
        print("‚ùå –û—à–∏–±–∫–∞: –î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!")
        return jsonify({"status": "error", "message": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"}), 400

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –∫–ª—é—á–∏ –ø—Ä–∏—à–ª–∏ –≤ JSON
    print("üîç –ö–ª—é—á–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ:", list(data.keys()))

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –∫–ª—é—á–µ–π
    required_keys = ["user_id", "date", "time", "guests", "name", "surname", "phone"]
    for key in required_keys:
        if key not in data:
            return jsonify({"status": "error", "message": f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç {key}"}), 400

    try:
        raw_phone = data["phone"]
        clean_phone = sanitize_phone(raw_phone)

        if not is_valid_phone(clean_phone):
            return jsonify({"status": "error", "message": "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 5 –¥–æ 15 —Ü–∏—Ñ—Ä."}), 400
        # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ª–∏–º–∏—Ç –≥–æ—Å—Ç–µ–π
        if int(data["guests"]) > 4:
            return jsonify({"status": "error", "message": "–°—Ç–æ–ª —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –º–∞–∫—Å–∏–º—É–º –Ω–∞ 4 —á–µ–ª–æ–≤–µ–∫. –£–º–µ–Ω—å—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π."}), 400

        # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        time_obj = datetime.strptime(data["time"], "%H:%M").time()
        if not (datetime.strptime("08:00", "%H:%M").time() <= time_obj <= datetime.strptime("23:00", "%H:%M").time()):
            return jsonify({"status": "error", "message": "–†–µ—Å—Ç–æ—Ä–∞–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç —Å 08:00 –¥–æ 23:00. –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –≤ —ç—Ç–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ."}), 400

        # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å—Ç–æ–ª–∏–∫–æ–≤ (¬±20 –º–∏–Ω—É—Ç –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)
        date = data["date"]
        time = datetime.strptime(data["time"], "%H:%M")
        time_start = (time - timedelta(minutes=20)).time()
        time_end = (time + timedelta(minutes=20)).time()

        cursor.execute("""
            SELECT COUNT(*) FROM reservations
            WHERE date = %s
            AND time BETWEEN %s AND %s
        """, (date, time_start, time_end))
        count = cursor.fetchone()[0]

        if count >= 12:
            suggested_time = find_available_time(date, data["time"])
            if suggested_time:
                return jsonify({
                    "status": "error",
                    "message": f"‚ùå –í—Å–µ —Å—Ç–æ–ª–∏–∫–∏ –∑–∞–Ω—è—Ç—ã –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.\nüí° –°–≤–æ–±–æ–¥–Ω–æ–µ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è: {suggested_time}"
                }), 400
            else:
                return jsonify({
                    "status": "error",
                    "message": "‚ùå –í—Å–µ —Å—Ç–æ–ª–∏–∫–∏ –∑–∞–Ω—è—Ç—ã. –†—è–¥–æ–º –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É."
                }), 400

        # ‚úÖ –í—Å—Ç–∞–≤–∫–∞ –≤ –ë–î
        cursor.execute(
            "INSERT INTO reservations (user_id, date, time, guests, name, surname, phone) "
            "VALUES (%s, %s, %s, %s, %s, %s, %s) RETURNING id",
            (data["user_id"], data["date"], data["time"], data["guests"],
            data["name"], data["surname"], data["phone"])
        )

        result = cursor.fetchone()
        if result is None:
            return jsonify({"status": "error", "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ (–Ω–µ –ø–æ–ª—É—á–µ–Ω ID)"}), 500
        reservation_id = result[0]


        cursor.execute("""
            SELECT COUNT(*) FROM reservations
            WHERE date = %s
            AND time BETWEEN %s AND %s
        """, (data["date"], time_start, time_end))
        updated_count = cursor.fetchone()[0]
        tables_left = max(0, 12 - updated_count)
        
        conn.commit()

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        user_data = {
            "user_id": data["user_id"],
            "date": data["date"],
            "time": data["time"],
            "guests": data["guests"],
            "name": data["name"],
            "surname": data["surname"],
            "phone": clean_phone
        }
        add_booking_to_calendar(user_data)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        
        bot.send_message(
            data["user_id"],
            f"‚úÖ –°—Ç–æ–ª–∏–∫ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω!\nüìÖ –î–∞—Ç–∞: {data['date']}\n‚è∞ –í—Ä–µ–º—è: {data['time']}\n"
            f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π: {data['guests']}\nüÜî –ù–æ–º–µ—Ä —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏: {reservation_id}\n"
            f"ü™ë –û—Å—Ç–∞–ª–æ—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–æ–ª–∏–∫–æ–≤ –≤ —ç—Ç–æ –≤—Ä–µ–º—è: {tables_left}"
        )

        return jsonify({"status": "success", "message": "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!"})

    except Exception as e:
        conn.rollback()
        return jsonify({"status": "error", "message": str(e)}), 500

def find_available_time(date, preferred_time, interval=20, max_tables=12):
    """–ò—â–µ—Ç –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è, –≥–¥–µ –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å—Ç–æ–ª–∏–∫–∏ (¬±interval –º–∏–Ω)."""
    time_obj = datetime.strptime(preferred_time, "%H:%M")
    for minutes_offset in range(10, 121, 10):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö ¬±2 —á–∞—Å–∞ —Å —à–∞–≥–æ–º 10 –º–∏–Ω
        for direction in [-1, 1]:
            new_time = (time_obj + timedelta(minutes=minutes_offset * direction)).time()
            if datetime.strptime("08:00", "%H:%M").time() <= new_time <= datetime.strptime("23:00", "%H:%M").time():
                cursor.execute("""
                    SELECT COUNT(*) FROM reservations
                    WHERE date = %s
                    AND time BETWEEN %s AND %s
                """, (
                    date,
                    (datetime.combine(datetime.today(), new_time) - timedelta(minutes=interval)).time(),
                    (datetime.combine(datetime.today(), new_time) + timedelta(minutes=interval)).time()
                ))
                count = cursor.fetchone()[0]
                if count < max_tables:
                    return new_time.strftime("%H:%M")
    return None


@app.route("/api/delete_table", methods=["POST"])
def delete_reservation():
    """–£–¥–∞–ª—è–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ ID –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    data = request.json
    print("üì© –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç Web App:", data)  # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å

    if not data:
        print("‚ùå –û—à–∏–±–∫–∞: –î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!")
        return jsonify({"status": "error", "message": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"}), 400

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –∫–ª—é—á–∏ –ø—Ä–∏—à–ª–∏ –≤ JSON
    required_keys = ["user_id", "number"]
    for key in required_keys:
        if key not in data:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á: {key}")
            return jsonify({"status": "error", "message": f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç {key}"}), 400

    try:
        user_id = int(data["user_id"])
        reservation_id = int(data["number"])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        cursor.execute("SELECT date, time FROM reservations WHERE id = %s AND user_id = %s", (reservation_id, user_id))
        reservation = cursor.fetchone()

        if not reservation:
            return jsonify({"status": "error", "message": "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"}), 404

        date, time = reservation

        # –£–¥–∞–ª—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("DELETE FROM reservations WHERE id = %s AND user_id = %s", (reservation_id, user_id))
        conn.commit()

        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ Google –ö–∞–ª–µ–Ω–¥–∞—Ä—è
        delete_booking_from_calendar(date, time)

        print(f"‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Ññ{reservation_id} —É–¥–∞–ª–µ–Ω–æ!")
        return jsonify({"status": "success", "message": f"–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Ññ{reservation_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ."})

    except ValueError:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–æ–º–µ—Ä –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ user_id –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏!")
        return jsonify({"status": "error", "message": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö"}), 400

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –≤ SQL-–∑–∞–ø—Ä–æ—Å–µ:", str(e))
        conn.rollback()
        return jsonify({"status": "error", "message": str(e)}), 500


def delete_booking_from_calendar(date, time):
    """–£–¥–∞–ª—è–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ Google –ö–∞–ª–µ–Ω–¥–∞—Ä—è."""
    events_result = service.events().list(calendarId=CALENDAR_ID, q=str(date), singleEvents=True).execute()
    events = events_result.get("items", [])

    for event in events:
        event_start = event.get("start", {}).get("dateTime", "")
        if event_start.startswith(f"{date}T{time}"):
            service.events().delete(calendarId=CALENDAR_ID, eventId=event["id"]).execute()
            print(f"‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {event['summary']} —É–¥–∞–ª–µ–Ω–æ –∏–∑ Google –ö–∞–ª–µ–Ω–¥–∞—Ä—è")
            break


@app.route("/api/get_specials", methods=["GET"])
def get_specials():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ü–∏–π –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
    specials = [
        {"title": "–î–Ω–µ–≤–Ω–æ–π –±–æ–Ω—É—Å", "description": "–°–∫–∏–¥–∫–∞ 15% –Ω–∞ –æ–±–µ–¥–µ–Ω–Ω–æ–µ –º–µ–Ω—é —Å 12:00 –¥–æ 15:00"},
        {"title": "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å", "description": "10% —Å–∫–∏–¥–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏"},
        {"title": "–°—á–∞—Å—Ç–ª–∏–≤—ã–µ —á–∞—Å—ã", "description": "–° 18:00 –¥–æ 20:00 –∫–æ–∫—Ç–µ–π–ª–∏ –ø–æ 299‚ÇΩ!"},
    ]
    return jsonify(specials)

@app.route("/api/specials/day_bonus", methods=["GET"])
def day_bonus():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–Ω–µ–≤–Ω–æ–º –±–æ–Ω—É—Å–µ"""
    special_photo = "static/menu/akcii.png"
    
    if not os.path.exists(special_photo):
        return jsonify({"status": "error", "message": "–û—à–∏–±–∫–∞! –§–∞–π–ª —Å –∞–∫—Ü–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404

    return jsonify({"status": "success", "image_url": f"/{special_photo}"})

@app.route("/api/specials/personal_bonus", methods=["POST"])
def get_personal_bonus():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º –±–æ–Ω—É—Å–µ"""
    data = request.json
    if "user_id" not in data:
        return jsonify({"status": "error", "message": "user_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}), 400

    cursor.execute("SELECT COUNT(*) FROM reservations WHERE user_id = %s", (data["user_id"],))
    result = cursor.fetchone()
    reservation_count = result[0] if result else 0

    if reservation_count == 0:
        message = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –≤ –Ω–∞—à–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ! –°–∫–∏–¥–∫–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 0%."
    elif reservation_count < 3:
        message = f"–ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —Å–∫–∏–¥–∫—É 10%. –í–∞—à–µ —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {reservation_count}."
    else:
        message = f"–ü–æ—Å–ª–µ —Ç—Ä–µ—Ç—å–µ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫–∏–¥–∫–∞ 15%. –í–∞—à–µ —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {reservation_count}."

    return jsonify({"status": "success", "message": message})



@app.route("/api/specials/back_to_menu", methods=["GET"])
def back_to_menu():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    return jsonify({"status": "success", "message": "–í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é..."})


@app.route("/api/get_menu", methods=["GET"])
def get_menu():
    menu_photos = [
        "static/menu/main.jpg",
        "static/menu/salat.jpg",
        "static/menu/desert.jpg"
    ]  # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ static

    random.shuffle(menu_photos)
    selected_photo = menu_photos[0]  # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

    return jsonify({"status": "success", "image_url": f"/{selected_photo}"})


@app.route("/api/get_reservations", methods=["POST"])
def get_reservations():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    data = request.json
    if "user_id" not in data:
        return jsonify({"status": "error", "message": "user_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}), 400

    cursor.execute("SELECT date, time, guests, name FROM reservations WHERE user_id=%s", (data["user_id"],))
    reservations = cursor.fetchall()

    if reservations:
        reservations_list = [
            {
                "date": str(res[0]),  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ —Å—Ç—Ä–æ–∫—É
                "time": res[1].strftime("%H:%M"),  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –≤ —Å—Ç—Ä–æ–∫—É
                "guests": res[2],
                "name": res[3]
            }
            for res in reservations
        ]
        return jsonify({"status": "success", "reservations": reservations_list})
    else:
        return jsonify({"status": "error", "message": "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π"}), 404



@app.route("/routes", methods=["GET"])
def list_routes():
    """–í—ã–≤–æ–¥ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ Flask"""
    import urllib
    output = []
    for rule in app.url_map.iter_rules():
        methods = ",".join(rule.methods)
        line = urllib.parse.unquote(f"{rule.endpoint}: {rule.rule} ({methods})")
        output.append(line)
    return "<br>".join(output)

if __name__ == "__main__":
    print("üöÄ Flask-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5000")
    app.run(host="0.0.0.0", port=5000)


